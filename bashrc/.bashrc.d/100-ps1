#!/bin/bash

PS1="\[${BOLD}${GREEN}\]\u@\h\[${RESET}${WHITE}\]:\[${BOLD}${BLUE}\]\w"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm* | rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*) ;;
esac

# Determine if connected over ssh.
function __is_ssh() {
    if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
        return 0
    elif [ "$PPID" == "0" ]; then
        return 1
    else
        case $(ps -o comm= -p $PPID) in
        sshd | */sshd) return 0 ;;
        esac
    fi
    return 1
}

# If connected over SSH, prepend a red (ssh) to the $PS1
if __is_ssh; then
    PS1="\[${BOLD}${RED}\](\[${RESET}${RED}\]ssh\[${BOLD}\]) \[${RESET}\]${PS1}"
fi

function __sysroot_ps1() {
    OLD_EXIT=$?
    if [ -n "$OECORE_TARGET_SYSROOT" ]; then
        echo -en "[$(basename $OECORE_TARGET_SYSROOT)] "
    fi
    exit $OLD_EXIT
}

PS1="\[${RESET}${ORANGE}\]\$(__sysroot_ps1)\[${RESET}\]${PS1}"

# Test whether the given function exists.
function function_exists() {
    declare -f -F "$1" >/dev/null
    return $?
}

export GIT_PS1_SHOWDIRTYSTATE=1        # Adds '*' and '+' for unstaged and staged changes
export GIT_PS1_DESCRIBE_STYLE='branch' # When in a detached head state, attempt to find the branch HEAD is on.
export GIT_PS1_SHOWCOLORHINTS=1        # Use colored output to indicate the current status ('git status -sb'). Only works if __git_ps1 is used from PROMPT_COMMAND, not PS1.
export GIT_PS1_SHOWSTASHSTATE=1        # Show a '$' next to the branch name if something is stashed.
export GIT_PS1_SHOWUNTRACKEDFILES=1    # Show a '%' next to the branch name if there are untracked files.
export GIT_PS1_SHOWUPSTREAM='auto'     # '=' means up to date with upstream, '<' means you're behind, and '>' means you're ahead. '<>' means you've diverged.

# Decorate PS1 with git branch, rebase, cherry-pick state.
if function_exists __git_ps1; then
    PS1="${PS1}\[${RESET}${PURPLE}\]\$(__git_ps1)\[${RESET}\]"
fi

# Prints different escape codes to stdout indicating the exit code of the previous command
function __decorate_exit_status() {
    if [ $? -eq 0 ]; then
        echo -en "${GREY}"
    else
        echo -en "${BOLD}${RED}"
    fi
}

# Append a colored $ to the end of the $PS1 indicating the exit code
PS1="${PS1} \[${WHITE}\]\[\$(__decorate_exit_status)\]\$\[${RESET}\] "
